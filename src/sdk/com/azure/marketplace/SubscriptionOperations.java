/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.marketplace;

import com.azure.marketplace.models.Operation;
import com.azure.marketplace.models.OperationList;
import com.azure.marketplace.models.UpdateOperationStatusEnum;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SubscriptionOperations.
 */
public interface SubscriptionOperations {
    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationList object if successful.
     */
    OperationList listOperations(UUID subscriptionId);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationList> listOperationsAsync(UUID subscriptionId, final ServiceCallback<OperationList> serviceCallback);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationList object
     */
    Observable<OperationList> listOperationsAsync(UUID subscriptionId);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationList object
     */
    Observable<ServiceResponse<OperationList>> listOperationsWithServiceResponseAsync(UUID subscriptionId);
    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationList object if successful.
     */
    OperationList listOperations(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OperationList> listOperationsAsync(UUID subscriptionId, UUID requestId, UUID correlationId, final ServiceCallback<OperationList> serviceCallback);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationList object
     */
    Observable<OperationList> listOperationsAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * List outstanding operations.
     * Lists the outstanding operations for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationList object
     */
    Observable<ServiceResponse<OperationList>> listOperationsWithServiceResponseAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Operation object if successful.
     */
    Operation getOperationStatus(UUID subscriptionId, UUID operationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Operation> getOperationStatusAsync(UUID subscriptionId, UUID operationId, final ServiceCallback<Operation> serviceCallback);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<Operation> getOperationStatusAsync(UUID subscriptionId, UUID operationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<ServiceResponse<Operation>> getOperationStatusWithServiceResponseAsync(UUID subscriptionId, UUID operationId);
    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Operation object if successful.
     */
    Operation getOperationStatus(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Operation> getOperationStatusAsync(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId, final ServiceCallback<Operation> serviceCallback);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<Operation> getOperationStatusAsync(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId);

    /**
     * Get operation status.
     * Enables the publisher to track the status of the specified triggered async operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Operation object
     */
    Observable<ServiceResponse<Operation>> getOperationStatusWithServiceResponseAsync(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateOperationStatus(UUID subscriptionId, UUID operationId);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateOperationStatusAsync(UUID subscriptionId, UUID operationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateOperationStatusAsync(UUID subscriptionId, UUID operationId);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateOperationStatusWithServiceResponseAsync(UUID subscriptionId, UUID operationId);
    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @param status Possible values include: 'Success', 'Failure'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateOperationStatus(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId, String planId, Long quantity, UpdateOperationStatusEnum status);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @param status Possible values include: 'Success', 'Failure'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateOperationStatusAsync(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId, String planId, Long quantity, UpdateOperationStatusEnum status, final ServiceCallback<Void> serviceCallback);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @param status Possible values include: 'Success', 'Failure'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateOperationStatusAsync(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId, String planId, Long quantity, UpdateOperationStatusEnum status);

    /**
     * Update the status of an operation.
     * Update the status of an operation to indicate success or failure with the provided values.
     *
     * @param subscriptionId the UUID value
     * @param operationId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @param status Possible values include: 'Success', 'Failure'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateOperationStatusWithServiceResponseAsync(UUID subscriptionId, UUID operationId, UUID requestId, UUID correlationId, String planId, Long quantity, UpdateOperationStatusEnum status);

}
