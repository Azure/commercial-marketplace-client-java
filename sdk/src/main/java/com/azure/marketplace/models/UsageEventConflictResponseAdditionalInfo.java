/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.marketplace.models;

import java.util.UUID;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The UsageEventConflictResponseAdditionalInfo model.
 */
public class UsageEventConflictResponseAdditionalInfo {
    /**
     * Unique identifier associated with the usage event.
     */
    @JsonProperty(value = "usageEventId")
    private UUID usageEventId;

    /**
     * Accepted|NotProcessed|Expired. Possible values include: 'Accepted',
     * 'NotProcessed', 'Expired'.
     */
    @JsonProperty(value = "status")
    private String status;

    /**
     * Time this message was created in UTC.
     */
    @JsonProperty(value = "messageTime")
    private DateTime messageTime;

    /**
     * Identifier of the resource against which usage is emitted.
     */
    @JsonProperty(value = "resourceId")
    private UUID resourceId;

    /**
     * The quantity property.
     */
    @JsonProperty(value = "quantity")
    private Long quantity;

    /**
     * Dimension identifier.
     */
    @JsonProperty(value = "dimension")
    private String dimension;

    /**
     * Time in UTC when the usage event occurred.
     */
    @JsonProperty(value = "effectiveStartTime")
    private DateTime effectiveStartTime;

    /**
     * Plan associated with the purchased offer.
     */
    @JsonProperty(value = "planId")
    private UUID planId;

    /**
     * Get unique identifier associated with the usage event.
     *
     * @return the usageEventId value
     */
    public UUID usageEventId() {
        return this.usageEventId;
    }

    /**
     * Set unique identifier associated with the usage event.
     *
     * @param usageEventId the usageEventId value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withUsageEventId(UUID usageEventId) {
        this.usageEventId = usageEventId;
        return this;
    }

    /**
     * Get accepted|NotProcessed|Expired. Possible values include: 'Accepted', 'NotProcessed', 'Expired'.
     *
     * @return the status value
     */
    public String status() {
        return this.status;
    }

    /**
     * Set accepted|NotProcessed|Expired. Possible values include: 'Accepted', 'NotProcessed', 'Expired'.
     *
     * @param status the status value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get time this message was created in UTC.
     *
     * @return the messageTime value
     */
    public DateTime messageTime() {
        return this.messageTime;
    }

    /**
     * Set time this message was created in UTC.
     *
     * @param messageTime the messageTime value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withMessageTime(DateTime messageTime) {
        this.messageTime = messageTime;
        return this;
    }

    /**
     * Get identifier of the resource against which usage is emitted.
     *
     * @return the resourceId value
     */
    public UUID resourceId() {
        return this.resourceId;
    }

    /**
     * Set identifier of the resource against which usage is emitted.
     *
     * @param resourceId the resourceId value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withResourceId(UUID resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the quantity value.
     *
     * @return the quantity value
     */
    public Long quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity value.
     *
     * @param quantity the quantity value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withQuantity(Long quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get dimension identifier.
     *
     * @return the dimension value
     */
    public String dimension() {
        return this.dimension;
    }

    /**
     * Set dimension identifier.
     *
     * @param dimension the dimension value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withDimension(String dimension) {
        this.dimension = dimension;
        return this;
    }

    /**
     * Get time in UTC when the usage event occurred.
     *
     * @return the effectiveStartTime value
     */
    public DateTime effectiveStartTime() {
        return this.effectiveStartTime;
    }

    /**
     * Set time in UTC when the usage event occurred.
     *
     * @param effectiveStartTime the effectiveStartTime value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withEffectiveStartTime(DateTime effectiveStartTime) {
        this.effectiveStartTime = effectiveStartTime;
        return this;
    }

    /**
     * Get plan associated with the purchased offer.
     *
     * @return the planId value
     */
    public UUID planId() {
        return this.planId;
    }

    /**
     * Set plan associated with the purchased offer.
     *
     * @param planId the planId value to set
     * @return the UsageEventConflictResponseAdditionalInfo object itself.
     */
    public UsageEventConflictResponseAdditionalInfo withPlanId(UUID planId) {
        this.planId = planId;
        return this;
    }

}
