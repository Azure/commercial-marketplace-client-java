/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.azure.marketplace;

import com.azure.marketplace.models.FulfillmentOperationsDeleteSubscriptionHeaders;
import com.azure.marketplace.models.FulfillmentOperationsUpdateSubscriptionHeaders;
import com.azure.marketplace.models.ResolvedSubscription;
import com.azure.marketplace.models.Subscription;
import com.azure.marketplace.models.SubscriptionPlans;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in FulfillmentOperations.
 */
public interface FulfillmentOperations {
    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ResolvedSubscription object if successful.
     */
    ResolvedSubscription resolve(String xMsMarketplaceToken);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ResolvedSubscription> resolveAsync(String xMsMarketplaceToken, final ServiceCallback<ResolvedSubscription> serviceCallback);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ResolvedSubscription object
     */
    Observable<ResolvedSubscription> resolveAsync(String xMsMarketplaceToken);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ResolvedSubscription object
     */
    Observable<ServiceResponse<ResolvedSubscription>> resolveWithServiceResponseAsync(String xMsMarketplaceToken);
    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ResolvedSubscription object if successful.
     */
    ResolvedSubscription resolve(String xMsMarketplaceToken, UUID requestId, UUID correlationId);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ResolvedSubscription> resolveAsync(String xMsMarketplaceToken, UUID requestId, UUID correlationId, final ServiceCallback<ResolvedSubscription> serviceCallback);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ResolvedSubscription object
     */
    Observable<ResolvedSubscription> resolveAsync(String xMsMarketplaceToken, UUID requestId, UUID correlationId);

    /**
     * Resolve a subscription.
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website, the URL contains a token in the query parameters. The partner is expected to use this token and make a request to resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource. This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's website from Azure (for example,  https://contoso.com/signup?token=..). Note, The URL decodes the token value from the browser before using it.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ResolvedSubscription object
     */
    Observable<ServiceResponse<ResolvedSubscription>> resolveWithServiceResponseAsync(String xMsMarketplaceToken, UUID requestId, UUID correlationId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Subscription&gt; object if successful.
     */
    PagedList<Subscription> listSubscriptions();

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Subscription>> listSubscriptionsAsync(final ListOperationCallback<Subscription> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<Page<Subscription>> listSubscriptionsAsync();

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<ServiceResponse<Page<Subscription>>> listSubscriptionsWithServiceResponseAsync();
    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param continuationToken Optional value, only used for ListSubscriptions.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Subscription&gt; object if successful.
     */
    PagedList<Subscription> listSubscriptions(final String continuationToken, final UUID requestId, final UUID correlationId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param continuationToken Optional value, only used for ListSubscriptions.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Subscription>> listSubscriptionsAsync(final String continuationToken, final UUID requestId, final UUID correlationId, final ListOperationCallback<Subscription> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param continuationToken Optional value, only used for ListSubscriptions.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<Page<Subscription>> listSubscriptionsAsync(final String continuationToken, final UUID requestId, final UUID correlationId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param continuationToken Optional value, only used for ListSubscriptions.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<ServiceResponse<Page<Subscription>>> listSubscriptionsWithServiceResponseAsync(final String continuationToken, final UUID requestId, final UUID correlationId);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Subscription object if successful.
     */
    Subscription getSubscription(UUID subscriptionId);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Subscription> getSubscriptionAsync(UUID subscriptionId, final ServiceCallback<Subscription> serviceCallback);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Subscription object
     */
    Observable<Subscription> getSubscriptionAsync(UUID subscriptionId);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Subscription object
     */
    Observable<ServiceResponse<Subscription>> getSubscriptionWithServiceResponseAsync(UUID subscriptionId);
    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Subscription object if successful.
     */
    Subscription getSubscription(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Subscription> getSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId, final ServiceCallback<Subscription> serviceCallback);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Subscription object
     */
    Observable<Subscription> getSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Get subscription.
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Subscription object
     */
    Observable<ServiceResponse<Subscription>> getSubscriptionWithServiceResponseAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateSubscription(UUID subscriptionId);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateSubscriptionAsync(UUID subscriptionId, final ServiceCallback<Void> serviceCallback);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateSubscriptionAsync(UUID subscriptionId);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FulfillmentOperationsUpdateSubscriptionHeaders>> updateSubscriptionWithServiceResponseAsync(UUID subscriptionId);
    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateSubscription(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity, final ServiceCallback<Void> serviceCallback);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> updateSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity);

    /**
     * Patch a subscription.
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FulfillmentOperationsUpdateSubscriptionHeaders>> updateSubscriptionWithServiceResponseAsync(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteSubscription(UUID subscriptionId);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteSubscriptionAsync(UUID subscriptionId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deleteSubscriptionAsync(UUID subscriptionId);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FulfillmentOperationsDeleteSubscriptionHeaders>> deleteSubscriptionWithServiceResponseAsync(UUID subscriptionId);
    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteSubscription(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deleteSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Delete a subscription.
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, FulfillmentOperationsDeleteSubscriptionHeaders>> deleteSubscriptionWithServiceResponseAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SubscriptionPlans object if successful.
     */
    SubscriptionPlans listAvailablePlans(UUID subscriptionId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SubscriptionPlans> listAvailablePlansAsync(UUID subscriptionId, final ServiceCallback<SubscriptionPlans> serviceCallback);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionPlans object
     */
    Observable<SubscriptionPlans> listAvailablePlansAsync(UUID subscriptionId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionPlans object
     */
    Observable<ServiceResponse<SubscriptionPlans>> listAvailablePlansWithServiceResponseAsync(UUID subscriptionId);
    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SubscriptionPlans object if successful.
     */
    SubscriptionPlans listAvailablePlans(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SubscriptionPlans> listAvailablePlansAsync(UUID subscriptionId, UUID requestId, UUID correlationId, final ServiceCallback<SubscriptionPlans> serviceCallback);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionPlans object
     */
    Observable<SubscriptionPlans> listAvailablePlansAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * List available plans.
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionPlans object
     */
    Observable<ServiceResponse<SubscriptionPlans>> listAvailablePlansWithServiceResponseAsync(UUID subscriptionId, UUID requestId, UUID correlationId);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void activateSubscription(UUID subscriptionId);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> activateSubscriptionAsync(UUID subscriptionId, final ServiceCallback<Void> serviceCallback);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> activateSubscriptionAsync(UUID subscriptionId);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> activateSubscriptionWithServiceResponseAsync(UUID subscriptionId);
    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void activateSubscription(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> activateSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity, final ServiceCallback<Void> serviceCallback);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> activateSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity);

    /**
     * Activate a subscription.
     * Use this call to activate a subscription.
     *
     * @param subscriptionId the UUID value
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param planId the String value
     * @param quantity the Long value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> activateSubscriptionWithServiceResponseAsync(UUID subscriptionId, UUID requestId, UUID correlationId, String planId, Long quantity);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Subscription&gt; object if successful.
     */
    PagedList<Subscription> listSubscriptionsNext(final String nextPageLink);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Subscription>> listSubscriptionsNextAsync(final String nextPageLink, final ServiceFuture<List<Subscription>> serviceFuture, final ListOperationCallback<Subscription> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<Page<Subscription>> listSubscriptionsNextAsync(final String nextPageLink);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<ServiceResponse<Page<Subscription>>> listSubscriptionsNextWithServiceResponseAsync(final String nextPageLink);
    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;Subscription&gt; object if successful.
     */
    PagedList<Subscription> listSubscriptionsNext(final String nextPageLink, final UUID requestId, final UUID correlationId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Subscription>> listSubscriptionsNextAsync(final String nextPageLink, final UUID requestId, final UUID correlationId, final ServiceFuture<List<Subscription>> serviceFuture, final ListOperationCallback<Subscription> serviceCallback);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<Page<Subscription>> listSubscriptionsNextAsync(final String nextPageLink, final UUID requestId, final UUID correlationId);

    /**
     * List subscriptions.
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;Subscription&gt; object
     */
    Observable<ServiceResponse<Page<Subscription>>> listSubscriptionsNextWithServiceResponseAsync(final String nextPageLink, final UUID requestId, final UUID correlationId);

}
