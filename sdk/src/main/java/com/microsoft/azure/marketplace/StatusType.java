/*
 * SaaS fulfillment APIs, version 2
 * This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.microsoft.azure.marketplace;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * StatusType
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-18T12:09:05.863-07:00[America/Los_Angeles]")
public class StatusType implements AnyOfbody1 {
  /**
   * Gets or Sets planId
   */
  @JsonAdapter(PlanIdEnum.Adapter.class)
  public enum PlanIdEnum {
    SUCCESS("Success"),
    FAILURE("Failure");

    private String value;

    PlanIdEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PlanIdEnum fromValue(String text) {
      for (PlanIdEnum b : PlanIdEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PlanIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlanIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlanIdEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlanIdEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("planId")
  private PlanIdEnum planId = null;

  public StatusType planId(PlanIdEnum planId) {
    this.planId = planId;
    return this;
  }

   /**
   * Get planId
   * @return planId
  **/
  @Schema(description = "")
  public PlanIdEnum getPlanId() {
    return planId;
  }

  public void setPlanId(PlanIdEnum planId) {
    this.planId = planId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusType statusType = (StatusType) o;
    return Objects.equals(this.planId, statusType.planId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusType {\n");
    
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
